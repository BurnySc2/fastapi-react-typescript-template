name: RunTests

on: [push, pull_request]

jobs:
#  test_backend:
#    strategy:
#      fail-fast: false
#      matrix:
#        os: [ubuntu-latest]
#        python-version: [3.7, 3.8, 3.9]
#    runs-on: ${{ matrix.os }}
#
#    steps:
#    - uses: actions/checkout@v2
#
#    - name: Set up Python ${{ matrix.python-version }}
#      uses: actions/setup-python@v1
#      with:
#        python-version: ${{ matrix.python-version }}
#
#    - name: Cache poetry
#      uses: actions/cache@v2
#      with:
#        path: ~/.cache/pypoetry/virtualenvs
#        key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('poetry.lock') }}
#
#    - name: Install Python dependencies
#      run: |
#        python -m pip install poetry
#        poetry install
#
#    - name: Run Python tests
#      run: |
#        poetry run pytest backend/test
#
#  test_frontend:
#    strategy:
#      fail-fast: false
#      matrix:
#        os: [ubuntu-latest]
#        node: ['12', '14', '16']
#    runs-on: ${{ matrix.os }}
#
#    steps:
#    - uses: actions/checkout@v2
#
#    - name: Set up Node ${{ matrix.node }}
#      uses: actions/setup-node@v1
#      with:
#        node-version: ${{ matrix.node }}
#
#    - name: Cache npm
#      uses: actions/cache@v2
#      with:
#        path: ~/.npm
#        key: ${{ runner.os }}-${{ matrix.node }}-node-${{ hashFiles('**/package-lock.json') }}
#
#    - name: Install npm dependencies
#      run: |
#        cd frontend
#        npm install
#        cd ..
#
#    - name: Run tests
#      run: |
#        npm run test
#
#  test_e2e:
#    strategy:
#      fail-fast: false
#      matrix:
#        os: [ubuntu-latest]
#        python-version: [3.9]
#        node: ['16']
#    runs-on: ${{ matrix.os }}
#
#    steps:
#    - uses: actions/checkout@v2
#
#    - name: Set up Python ${{ matrix.python-version }}
#      uses: actions/setup-python@v1
#      with:
#        python-version: ${{ matrix.python-version }}
#
#    - name: Cache poetry
#      uses: actions/cache@v2
#      with:
#        path: ~/.cache/pypoetry/virtualenvs
#        key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('poetry.lock') }}
#
#    - name: Install Python dependencies
#      run: |
#        python -m pip install poetry
#        poetry install
#
#    - name: Set up Node ${{ matrix.node }}
#      uses: actions/setup-node@v1
#      with:
#        node-version: ${{ matrix.node }}
#
#    - name: Cache npm
#      uses: actions/cache@v2
#      with:
#        path: ~/.npm
#        key: ${{ runner.os }}-${{ matrix.node }}-node-${{ hashFiles('**/package-lock.json') }}
#
#    - name: Install npm dependencies
#      run: |
#        cd frontend
#        npm install
#        cd ..
#
#    - name: Run e2e tests
#      run: |
#        poetry run pytest test/test_e2e.py
#
#  test_integration:
#    strategy:
#      fail-fast: false
#      matrix:
#        os: [ubuntu-latest]
#        python-version: [3.9]
#        node: ['16']
#    runs-on: ${{ matrix.os }}
#
#    steps:
#    - uses: actions/checkout@v2
#
#    - name: Set up Python ${{ matrix.python-version }}
#      uses: actions/setup-python@v1
#      with:
#        python-version: ${{ matrix.python-version }}
#
#    - name: Cache poetry
#      uses: actions/cache@v2
#      with:
#        path: ~/.cache/pypoetry/virtualenvs
#        key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('poetry.lock') }}
#
#    - name: Install Python dependencies
#      run: |
#        python -m pip install poetry
#        poetry install
#
#    - name: Set up Node ${{ matrix.node }}
#      uses: actions/setup-node@v1
#      with:
#        node-version: ${{ matrix.node }}
#
#    - name: Cache npm
#      uses: actions/cache@v2
#      with:
#        path: ~/.npm
#        key: ${{ runner.os }}-${{ matrix.node }}-node-${{ hashFiles('**/package-lock.json') }}
#
#    - name: Install npm dependencies
#      run: |
#        cd frontend
#        npm install
#        cd ..
#
#    - name: Start MongoDB
#      run: |
#        docker run --rm -d --name mongodb_test -p 27017-27019:27017-27019 mongo:5.0.0
#
#    - name: Start Postgres
#      run: |
#        docker run --rm -d --name postgres_test -p 5432:5432 -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=changeme postgres:9.6.23-alpine3.14
#
#    - name: Run integration tests
#      run: |
#        poetry run pytest test/test_integration.py
#
#  deploy_backend:
#    strategy:
#      matrix:
#        os: [ubuntu-latest]
#    runs-on: ${{ matrix.os }}
#    needs: [test_backend, test_integration]
#
#    steps:
#    - uses: actions/checkout@v2
#
#    - name: Deploy backend
#      if: github.ref == 'refs/heads/master'
#      run: |
#        rm -rf data
#    # TODO Stop/disable service, upload to server, update poetry packages, start/enable service

  deploy_frontend:
    env:
      REACT_APP_PROXY: http://localhost:8000
      REACT_APP_WEBSOCKET: ws://localhost:8000
    strategy:
      matrix:
        os: [ubuntu-latest]
        node: ['16']
    runs-on: ${{ matrix.os }}
#    needs: [test_frontend, test_e2e, test_integration]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Node ${{ matrix.node }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node }}

    - name: Cache npm
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-${{ matrix.node }}-node-production-${{ hashFiles('**/package-lock.json') }}

    - name: Install npm dependencies
      run: |
        cd frontend
        npm install --production
        cd ..

    - name: Build frontend
      run: |
        npm run build

    - name: Publish to Github Pages
      if: github.ref == 'refs/heads/master'
      uses: JamesIves/github-pages-deploy-action@releases/v3
      with:
        GIT_CONFIG_NAME: Github Actions Deployer
        GIT_CONFIG_EMAIL: foo@bar.com
        ACCESS_TOKEN: ${{ secrets.GITHUB_PAGES_TOKEN }}
        SINGLE_COMMIT: true
        BASE_BRANCH: master           # The branch the action should deploy from.
        BRANCH: gh-pages           # The branch the action should deploy to.
        FOLDER: frontend/build           # The folder the action should deploy.

#    - name: Deploy to GitHub Pages
#      if: github.ref == 'refs/heads/master'
#      uses: crazy-max/ghaction-github-pages@v2
#      with:
#        committer: "Deployer Bot <deploy@foo.bar>"
#        author: "Deployer Bot <deploy@foo.bar>"
#        target_branch: gh-pages
#        build_dir: frontend/build
#      env:
#        GH_PAT: ${{ secrets.GITHUB_PAGES_TOKEN }}
