{"version":3,"sources":["pages/About.tsx","components/ChatMessage.tsx","pages/NormalChat.tsx","components/TodoItem.tsx","functions/fetch_helper.ts","pages/TodoPage.tsx","pages/Home.tsx","components/MyRouter.tsx","App.tsx","index.tsx"],"names":["About","className","ChatMessage","message","timestamp","author","displayed_name","userName","Fragment","moment","format","NormalChat","useState","setUserName","selectedUserName","SetSelectedUserName","waitingForUserNameResponse","setWaitingForUserNameResponse","chatMessage","setChatMessage","errorMessage","setErrorMessage","messages","setMessages","useEffect","connect","userNameInputField","ws","setws","address","process","WebSocket","onmessage","event","content","JSON","parse","data","console","log","Object","keys","error","newMessage","newMessageHistory","connectUser","onclose","setTimeout","sleep_in_seconds","onopen","stringify","send","onerror","close","tryToConnectUser","a","readyState","handleKeydown","e","key","sendChatMessage","Date","now","rendered_messages","map","id","type","placeholder","value","maxLength","onChange","target","readOnly","onClick","onKeyDown","TodoItem","index","deleteFunction","fetch2","url","requestOptions","fetch","get","post","body","method","headers","delete_","TodoPage","newTodoText","setNewTodoText","todos","setTodos","APIserverIsResponding","setAPIserverIsResponding","getTodos","response","ok","json","Error","statusText","submitPressed","localSubmit","submitPressedBody","new_todo","submitPressedModel","todo_description","text","removeTodo","localRemove","maxIndex","forEach","todo","Math","max","findIndex","obj","slice","undefined","todoTextInput","renderApiServerResponding","todoItem","HomePage","href","MyRouter","to","path","App","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ad337369.chunk.js","sourcesContent":["import React from \"react\"\n\nexport default function About(): JSX.Element {\n    return (\n        <div className=\"text-center my-2\">\n            This is my about page! Here I display features of svelte that I have implemented\n        </div>\n    )\n}\n","import React from \"react\"\nimport moment from \"moment\"\n\nexport type Message = {\n    timestamp: number\n    author: string\n    message: string\n}\n\ntype Props = {\n    message: Message\n    userName: string\n}\n\nexport function ChatMessage({ message: { timestamp, author, message }, userName }: Props): JSX.Element {\n    const displayed_name = author === userName ? \"You\" : author\n    return (\n        <React.Fragment>\n            <div className=\"col-span-1\">{moment(timestamp * 1000).format(\"HH:mm:ss\")}</div>\n            <div className=\"col-span-1\">{displayed_name}</div>\n            <div className=\"col-span-8\">{message}</div>\n        </React.Fragment>\n    )\n}\n","import React, { KeyboardEvent, useEffect, useState } from \"react\"\nimport { Message, ChatMessage } from \"../components/ChatMessage\"\n\nexport default function NormalChat(): JSX.Element {\n    // Accepted username by server\n    const [userName, setUserName] = useState(\"\")\n    // Username in the \"your username\" input field\n    const [selectedUserName, SetSelectedUserName] = useState(\"\")\n    // When sending the username to server, do not allow client to send new requests (this field will be filled with the username)\n    const [waitingForUserNameResponse, setWaitingForUserNameResponse] = useState(\"\")\n    // The chat message the user is about to send\n    const [chatMessage, setChatMessage] = useState(\"\")\n    const [errorMessage, setErrorMessage] = useState(\"\")\n    // All chat messages in the chat\n    const [messages, setMessages] = useState<Message[]>([\n        { timestamp: 123, author: \"yolo\", message: \"example message\" },\n    ])\n\n    useEffect(() => {\n        connect()\n    }, [])\n\n    // Websocket connection handling\n    const [ws, setws] = useState<WebSocket | null>(null)\n    const connect = () => {\n        const address = process.env.REACT_APP_WEBSOCKET\n        if (!address) {\n            console.error(\"process.env.REACT_APP_WEBSOCKET is not set! Check your Env variables\")\n        }\n        const ws = new WebSocket(`${address}/chatws`)\n        ws.onmessage = (event) => {\n            // Called when message received\n            try {\n                const content = JSON.parse(event.data)\n                console.log(`Received: ${Object.keys(content)}`)\n                // console.log(JSON.stringify(content))\n                if (\"message\" in content) {\n                    // Received example message\n                    console.log(`Received: ${content.message}`)\n                } else if (\"error\" in content) {\n                    // Error handling\n                    if (content.error === \"usernameTaken\") {\n                        setErrorMessage(`Username '${waitingForUserNameResponse}' is already taken!`)\n                        setWaitingForUserNameResponse(\"\")\n                    }\n                } else if (\"newMessage\" in content) {\n                    // Received new message\n                    // console.log(`Received new message: ${JSON.stringify(content.newMessage)}`)\n                    // Why doesn't this work\n                    // setMessages([...messages, content.newMessage])\n                    setMessages((messages) => [...messages, content.newMessage])\n                } else if (\"newMessageHistory\" in content) {\n                    // Received new message\n                    // console.log(`Received new message history: ${JSON.stringify(content.newMessageHistory)}`)\n                    setMessages([...content.newMessageHistory])\n                } else if (\"connectUser\" in content) {\n                    // User connected, server accepted the username\n                    console.log(`Successfully connected to server with username ${content.connectUser}`)\n                    setErrorMessage(\"\")\n                    setWaitingForUserNameResponse(\"\")\n                    setMessages([])\n                    setUserName(content.connectUser)\n                }\n            } catch {\n                // Message was not in JSON format\n                console.log(\"Received unreadable data!\")\n                console.log(event.data)\n            }\n        }\n        ws.onclose = () => {\n            // Called when connection is closed - e.g. when there was an error, when server shut down, or internet connection ended\n            const sleep_in_seconds = 5\n            setTimeout(() => {\n                connect()\n            }, sleep_in_seconds * 1000)\n        }\n        ws.onopen = () => {\n            if (ws) {\n                const message = JSON.stringify({ message: \"Hello from client!\" })\n                ws.send(message)\n            }\n        }\n        ws.onerror = () => {\n            if (ws) {\n                ws.close()\n            }\n        }\n        setws(ws)\n    }\n\n    const tryToConnectUser = async () => {\n        // Send a username to the server and see if it is available\n        setErrorMessage(\"\")\n        if (ws && ws.readyState === 1) {\n            console.log(`Trying to connect as user '${selectedUserName}'`)\n            if (waitingForUserNameResponse === \"\") {\n                setWaitingForUserNameResponse(selectedUserName)\n                ws.send(\n                    JSON.stringify({\n                        tryToConnectUser: selectedUserName,\n                    })\n                )\n            }\n        } else {\n            setErrorMessage(\"WebSocket is not yet ready!\")\n        }\n    }\n\n    const handleKeydown = async (e: KeyboardEvent<HTMLInputElement>) => {\n        // Or use e.code: \"NumpadEnter or \"Enter\" for more specific handling\n        if (e.key === \"Enter\") {\n            await sendChatMessage()\n        }\n    }\n\n    const sendChatMessage = async () => {\n        console.log(\"Trying to send chat message...\")\n        if (chatMessage !== \"\") {\n            if (ws && ws.readyState === 1) {\n                if (userName !== \"\") {\n                    // TODO Once we send a message, we should receive a 'newMessage' within the next 2 seconds - disconnect (=set username to \"\") if none received\n                    ws.send(\n                        JSON.stringify({\n                            sendChatMessage: {\n                                timestamp: Date.now() / 1000,\n                                author: userName,\n                                message: chatMessage,\n                            },\n                        })\n                    )\n                    setChatMessage(\"\")\n                }\n            } else {\n                console.log(\"Unable to send message - WS not yet ready\")\n            }\n        }\n    }\n\n    const rendered_messages = messages.map((message) => {\n        const key = `${message.timestamp};${message.author};${message.message}`\n        return <ChatMessage message={message} userName={userName} key={key} />\n    })\n\n    let userNameInputField: JSX.Element\n    if (waitingForUserNameResponse === \"\") {\n        userNameInputField = (\n            <input\n                id=\"username\"\n                type=\"text\"\n                placeholder=\"Username\"\n                className=\"border\"\n                value={selectedUserName}\n                maxLength={20}\n                onChange={(e) => {\n                    SetSelectedUserName(e.target.value)\n                }}\n            />\n        )\n    } else {\n        userNameInputField = (\n            <input type=\"text\" placeholder=\"Username\" className=\"border\" readOnly value={waitingForUserNameResponse} />\n        )\n    }\n\n    let rendered_site: JSX.Element\n    if (userName === \"\") {\n        // Before connection\n        rendered_site = (\n            <div className=\"flex flex-col m-2 border border-2 border-black items-center\">\n                <div>Connect to chat</div>\n                {userNameInputField}\n                <button id=\"connect\" onClick={tryToConnectUser} className=\"border-2 border-black p-1\">\n                    Connect\n                </button>\n                <div>{errorMessage}</div>\n            </div>\n        )\n    } else {\n        // After user connected with username\n        rendered_site = (\n            <div className=\"flex flex-col m-2\">\n                <div id=\"chatbox\" className=\"grid grid-cols-10 overflow-y-auto\">\n                    {rendered_messages}\n                </div>\n                <div className=\"grid grid-cols-10 gap-2\">\n                    <input\n                        id=\"chatinput\"\n                        className=\"col-span-9 border-2\"\n                        type=\"text\"\n                        placeholder={\"Write something!\"}\n                        value={chatMessage}\n                        onChange={(e) => {\n                            setChatMessage(e.target.value)\n                        }}\n                        onKeyDown={handleKeydown}\n                    />\n                    <button id=\"sendmessage\" className=\"col-span-1 border-2\" onClick={sendChatMessage}>\n                        Send\n                    </button>\n                </div>\n            </div>\n        )\n    }\n\n    return rendered_site\n}\n","import React from \"react\"\n\ntype Props = {\n    index: number\n    id: number\n    content: string\n    deleteFunction: () => void\n}\n\nexport default function TodoItem({ index, content, deleteFunction }: Props): JSX.Element {\n    return (\n        <div className=\"grid grid-cols-12 mx-2\">\n            <div className=\"col-span-2 flex \">\n                <div className=\"mx-2 my-auto\">{index + 1})</div>\n                <button className=\"mx-2 p-1  border-2\" onClick={deleteFunction}>\n                    Delete\n                </button>\n                {/*<div className=\"mx-2 my-auto\">{id})</div>*/}\n            </div>\n            <div className=\"col-span-10 my-auto\">{content}</div>\n        </div>\n    )\n}\n","const fetch2 = async (url: string, requestOptions: RequestInit = {}): Promise<Response> => {\n    // Make use of env variable \"REACT_APP_PROXY\" because react doesnt let you override the package.json \"proxy\" setting with an env variable\n    // If env variable is not set, use empty string and use default from package.json \"proxy\"\n    const address = process.env.REACT_APP_PROXY\n    if (!address) {\n        console.error(\"process.env.REACT_APP_PROXY is not set! Check your Env variables\")\n    }\n    return await fetch(`${address}${url}`, requestOptions)\n}\n\nexport const get = async (url: string): Promise<Response> => {\n    return await fetch2(url)\n}\n\nexport const post = async (url: string, body: Record<string, unknown> = {}): Promise<Response> => {\n    const requestOptions = {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(body),\n    }\n    return await fetch2(url, requestOptions)\n}\n\nexport const delete_ = async (url: string): Promise<Response> => {\n    const requestOptions = {\n        method: \"DELETE\",\n    }\n    return await fetch2(url, requestOptions)\n}\n","import React, { useEffect, useState } from \"react\"\nimport TodoItem from \"../components/TodoItem\"\nimport { delete_, get, post } from \"../functions/fetch_helper\"\n\ntype ITodoItem = {\n    id: number\n    content: string\n}\n\nexport default function TodoPage(): JSX.Element {\n    const [newTodoText, setNewTodoText] = useState(\"\")\n    const [todos, setTodos] = useState<ITodoItem[]>([])\n    const [APIserverIsResponding, setAPIserverIsResponding] = useState(true)\n\n    useEffect(() => {\n        getTodos()\n    }, [])\n\n    const getTodos = async () => {\n        try {\n            const response = await get(\"/api\")\n            if (response.ok) {\n                setTodos(await response.json())\n                setAPIserverIsResponding(true)\n                // console.log(`Response is: ${JSON.stringify(cards)}`);\n            } else {\n                throw new Error(response.statusText)\n            }\n        } catch {\n            setAPIserverIsResponding(false)\n        }\n    }\n\n    const submitPressed = async () => {\n        /*\n        To add optional search params, use:\n        let params = new URLSearchParams(\"\")\n        params.set(\"mykey\", \"myvalue\")\n        fetch(`/api/${newTodo}?` + params.toString(), requestOptions)\n         */\n        if (APIserverIsResponding) {\n            await post(`/api/${newTodoText}`)\n        } else {\n            localSubmit()\n        }\n        setNewTodoText(\"\")\n        await getTodos()\n    }\n\n    const submitPressedBody = async () => {\n        if (APIserverIsResponding) {\n            await post(\"/api_body\", {\n                new_todo: newTodoText,\n            })\n        } else {\n            localSubmit()\n        }\n        setNewTodoText(\"\")\n        await getTodos()\n    }\n\n    const submitPressedModel = async () => {\n        if (APIserverIsResponding) {\n            const response = await post(\"/api_model\", {\n                todo_description: newTodoText,\n            })\n            if (!response.ok) {\n                // If error, then you can debug here and see which fields were missing/expected\n                const body = await response.text()\n                console.log(body)\n            }\n        } else {\n            localSubmit()\n        }\n        setNewTodoText(\"\")\n        await getTodos()\n    }\n\n    const removeTodo = async (id: number) => {\n        if (APIserverIsResponding) {\n            await delete_(`/api/${id}`)\n        } else {\n            localRemove(id)\n        }\n        await getTodos()\n    }\n\n    const localSubmit = () => {\n        // Add an item to local todolist\n        let maxIndex = 0\n        todos.forEach((todo) => {\n            maxIndex = Math.max(todo.id, maxIndex)\n        })\n        setTodos([...todos, { id: maxIndex + 1, content: newTodoText }])\n        setNewTodoText(\"\")\n    }\n\n    const localRemove = (id: number) => {\n        // Remove an item from local todolist\n        const index = todos.findIndex((obj) => {\n            return obj.id === id\n        })\n        if (index >= 0) {\n            setTodos([...todos.slice(undefined, index), ...todos.slice(index + 1)])\n        }\n    }\n\n    // Render UI\n    const todoTextInput = (\n        <input\n            id=\"newTodoInput\"\n            className=\"border-2 my-2 mx-1\"\n            type=\"text\"\n            onChange={(e) => {\n                setNewTodoText(e.target.value)\n            }}\n            value={newTodoText}\n            placeholder=\"My new todo item\"\n        />\n    )\n\n    const renderTodoItem = (todoItem: ITodoItem, index: number) => {\n        return (\n            <TodoItem\n                index={index}\n                id={todoItem.id}\n                content={todoItem.content}\n                deleteFunction={() => removeTodo(todoItem.id)}\n                key={todoItem.id}\n            />\n        )\n    }\n\n    const renderApiServerResponding = APIserverIsResponding ? (\n        \"\"\n    ) : (\n        <div className=\"bg-red-300 rounded p-1\">Unable to connect to server - running local mode</div>\n    )\n\n    return (\n        <div>\n            <div className=\"flex flex-col items-center\">\n                <div className=\"flex\">\n                    {todoTextInput}\n                    <button className=\"border-2 my-2 mx-1\" id=\"submit1\" onClick={submitPressed}>\n                        Submit\n                    </button>\n                    <button className=\"border-2 my-2 mx-1\" id=\"submit2\" onClick={submitPressedBody}>\n                        SubmitBody\n                    </button>\n\n                    <button className=\"border-2 my-2 mx-1\" id=\"submit3\" onClick={submitPressedModel}>\n                        SubmitModel\n                    </button>\n                </div>\n                {renderApiServerResponding}\n            </div>\n\n            <div className=\"grid grid-cols-1 justify-items-center \">\n                <div>{todos.map(renderTodoItem)}</div>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\n\nexport default function HomePage(): JSX.Element {\n    const name = \"world\"\n    return (\n        <div className=\"text-center my-2\">\n            <div>Hello {name}!</div>\n            <div>\n                Visit the <a href=\"https://svelte.dev/tutorial\">Svelte tutorial</a> to learn how to build Svelte apps.\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { HashRouter, Switch, Route, Link } from \"react-router-dom\"\nimport About from \"../pages/About\"\nimport NormalChat from \"../pages/NormalChat\"\nimport TodoPage from \"../pages/TodoPage\"\nimport HomePage from \"../pages/Home\"\n\nexport default function MyRouter(): JSX.Element {\n    return (\n        <HashRouter>\n            <div>\n                {/*Links in header*/}\n                <div className=\"flex justify-center my-2\">\n                    <Link id=\"home\" className=\"mx-2 p-1 border-2\" to=\"/\">\n                        Home\n                    </Link>\n                    <Link id=\"about\" className=\"mx-2 p-1 border-2\" to=\"/about\">\n                        About\n                    </Link>\n                    <Link id=\"chat\" className=\"mx-2 p-1 border-2\" to=\"/chat\">\n                        NormalChat\n                    </Link>\n                    <Link id=\"todo\" className=\"mx-2 p-1 border-2\" to=\"/todo\">\n                        Todo\n                    </Link>\n                </div>\n\n                {/*What to display based on current page path*/}\n                <Switch>\n                    <Route path=\"/about\">\n                        <About />\n                    </Route>\n                    <Route path=\"/chat\">\n                        <NormalChat />\n                    </Route>\n                    <Route path=\"/todo\">\n                        <TodoPage />\n                    </Route>\n                    <Route path=\"/\">\n                        <HomePage />\n                    </Route>\n                </Switch>\n            </div>\n        </HashRouter>\n    )\n}\n","import React, { Component, ReactElement } from \"react\"\nimport MyRouter from \"./components/MyRouter\"\n\nclass App extends Component {\n    render(): ReactElement {\n        return (\n            <div>\n                <MyRouter />\n            </div>\n        )\n    }\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n"],"sourceRoot":""}